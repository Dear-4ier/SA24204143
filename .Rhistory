first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 10
)
# 输出比较结果
print(benchmark_result)
# 生成随机大整数向量
set.seed(123)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(500:600, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 10
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
set.seed(123)
num_digits <- sample(500:600, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 10
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
set.seed(123)
num_digits <- sample(500:600, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 10
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
set.seed(123)
num_digits <- sample(500:600, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 10
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(500:600, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(500:600, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(500:600, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(5000:6000, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(5000:6000, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(5000:6000, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(500:600, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(60, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(500:600, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
nums_1
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(5000:6000, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
nums_1
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(100:200, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
nums_1
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(100:200, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
nums_1
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(100:200, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(100:200, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(100:200, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(100:200, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(10:20, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
num_1 <- "-987654321234567898765432123456789"
num_2 <- "-123456789876567898765432123456789"
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(num_1[1], num_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
num_1 <- "-987654321234567898765432123456789"
num_2 <- "-123456789876567898765432123456789"
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(num_1[1], num_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
num_1 <- "-987654321234567898765432123456789"
num_2 <- "-123456789876567898765432123456789"
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(num_1[1], num_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
num_1 <- "-987654321234567898765432123456789"
num_2 <- "-123456789876567898765432123456789"
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(num_1[1], num_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
num_1 <- "-987654321234567898765432123456789"
num_2 <- "-123456789876567898765432123456789"
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(num_1[1], num_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(100:200, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 生成50到60位数字的函数
generate_large_number_str <- function() {
num_digits <- sample(500:600, 1)  # 随机确定数字的位数
first_digit <- sample(1:9, 1)  # 确保首位数字不是0，从1到9里选
remaining_digits <- sample(0:9, num_digits - 1, replace = TRUE)  # 生成剩下的位数数字
paste0(c(first_digit, remaining_digits), collapse = "")  # 组合成字符串
}
set.seed(123)
nums_1 <- replicate(5, generate_large_number_str())
nums_2 <- replicate(5, generate_large_number_str())
# 进行速度比较
benchmark_result <- microbenchmark(
ktimes = ktimes(nums_1[1], nums_2[1]),
builtin_multiply = as.character(as.bigz(nums_1[1]) * as.bigz(nums_2[1])),
times = 100
)
# 输出比较结果
print(benchmark_result)
# 定义两个小数
num3 <- "987654321.234567898765432123456789000"
num4 <- "0.123456789876567898765432123456789"
# 使用 fktimes 函数计算
result_fktimes <- fktimes(num3, num4)
print(result_fktimes)
library(SA24204143)
num1 <- "-987654321234567898765432123456789"
num2 <- "-123456789876567898765432123456789"
# 使用 ktimes 函数计算
result_ktimes <- ktimes(num1, num2)
result_ktimes
# 使用 as.bigz 函数计算
result_bigz <- as.character((as.bigz(num1) * as.bigz(num2)))
result_bigz
# 比较结果
if (result_ktimes == result_bigz) {
print("ktimes 函数计算结果与 as.bigz 函数计算结果一致。")
} else {
print("ktimes 函数计算结果与 as.bigz 函数计算结果不一致。")
}
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::build(vignettes=FALSE)
install.packages('../SA24204143_1.0.tar.gz',repo=NULL)
install.packages('../SA24204143_1.0.tar.gz',repo=NULL)
